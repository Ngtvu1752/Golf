#include<bits/stdc++.h>
#include "graphic.h"
#include "entity.h"
using namespace std;

void logErrorAndExit(const char*msg, const char* error)
{
    SDL_LogMessage(SDL_LOG_CATEGORY_APPLICATION, SDL_LOG_PRIORITY_ERROR, "%s: %s", msg, error);
    SDL_Quit();
}

Graphic::Graphic(int w, int h, const char* filename)
    :window(NULL),renderer(NULL)
{
    if(SDL_Init(SDL_INIT_EVERYTHING) < 0)
    {
        logErrorAndExit("SDL_Init", SDL_GetError());
    }
    window = SDL_CreateWindow(filename, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, w, h, SDL_WINDOW_ALLOW_HIGHDPI);

    //ktra xem window có được create thành công không
    if(window == NULL)
    {
        logErrorAndExit("CreateWindow", SDL_GetError());
    }
    if(!IMG_Init(IMG_INIT_JPG|| IMG_INIT_PNG))
    {
        logErrorAndExit("SDL_IMG loi mm roi: ", IMG_GetError());
    }

    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED |
                                  SDL_RENDERER_PRESENTVSYNC);
    //Khi chạy trong máy ảo (ví dụ phòng máy ở trường)
    //renderer = SDL_CreateSoftwareRenderer(SDL_GetWindowSurface(window));

    if (renderer == nullptr) logErrorAndExit("CreateRenderer", SDL_GetError());

    SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "linear");
    SDL_RenderSetLogicalSize(renderer, WIDTH, HEIGHT);

}
SDL_Texture* Graphic::loadingTexture(const char* filename)
{
    SDL_Texture* texture = NULL;
	texture = IMG_LoadTexture(renderer, filename);

	if (texture == NULL)
		std::cout << "Failed to load texture. Error: " << SDL_GetError() << std::endl;

	return texture;
}
void Graphic::render(SDL_Texture* p_tex)
{
    SDL_RenderCopy(renderer, p_tex);
}
void Graphic::renderEntity(Entity& p_entity)
{
    SDL_Rect src;
    src.x = p_entity.getCurrFrame().x;
    src.y = p_entity.getCurrFrame().y;
    src.w = p_entity.getCurrFrame().w;
    src.h = p_entity.getCurrFrame().h;
    
    SDL_Rect dst;
    dst.x = p_entity.getPos().x;
    dst.y = p_entity.getPos().y;
    dst.w = p_entity.getCurrFrame().w;
    dst.h = p_entity.getCurrFrame().h;
    
    SDL_RenderCopy(renderer, p_entity)
}
void Graphic::renderTexture( int x, int y, SDL_Texture* texture)
{
    SDL_Rect dest;
    dest.x = x;
    dest.y = y;
//    QueryTexture lam nhiem vu lay w va h cua texture cho rect
    SDL_QueryTexture(texture, NULL, NULL, &dest.w, &dest.h);

//    if(clip != NULL)
//    {
//        dest.h = clip->h;
//        dest.w = clip->w;
//    }
    SDL_RenderCopy(renderer, texture, NULL, &dest);
}
void Graphic::display()
{
    SDL_RenderPresent(renderer);
}
void Graphic::quitSDL()
{
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();
    IMG_Quit();
}
